{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","onClick","onClickCallback","id","disabled","className","value","Board","squareList","squares","allSquares","forEach","row","i","push","squareComponents","map","square","generateSquareComponents","PLAYER_1","WINFORMATIONS","generateSquares","currentId","col","App","useState","setSquares","turn","setTurn","winner","setWinner","checkForWinner","win","current","Set","idx","add","size","values","next","squareId","newSquares","someoneWon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9159902.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css';\n\nconst Square = (props) => {\n  // For Wave 1 enable this\n  //  Component to alert a parent\n  //  component when it's clicked on.\n  \n  return (\n    // <button onClick={doSomething} className=\"square\">\n    <button\n      onClick={() => {\n        props.onClickCallback(props.id);\n      }}\n      disabled={props.disabled}\n      className=\"square\"\n    >\n      {props.value}\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  disabled: PropTypes.bool,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  // squares is a 2D Array, but\n  //  you need to return a 1D array\n  //  of square components\n  let allSquares = [];\n  squares.forEach((row) => {\n    for (let i = 0; i < 3; i++) {\n      allSquares.push(row[i]);\n    }\n  });\n\n  const squareComponents = allSquares.map((square) => {\n    return (\n      <Square\n        key={square.id}\n        value={square.value}\n        onClickCallback={onClickCallback}\n        id={square.id}\n        disabled={square.disabled}\n      />\n    );\n  });\n  return <div className=\"grid\">{squareComponents}</div>;\n};\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  // console.log(squareList);\n  return <div className=\"grid\">{squareList}</div>;\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired,\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst WINFORMATIONS = [\n  // Rows\n  [[0,0], [0,1], [0,2]],\n  [[1,0], [1,1], [1,2]],\n  [[2,0], [2,1], [2,2]],\n  // Cols\n  [[0,0], [1,0], [2,0]],\n  [[0,1], [1,1], [2,1]],\n  [[0,2], [1,2], [2,2]],\n  // Diagonals\n  [[0,0], [1,1], [2,2]],\n  [[0,2], [1,1], [2,0]],\n];\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n        disabled: false,\n      });\n      currentId += 1;\n    }\n  }\n  return squares;\n};\n\nconst App = () => {\n  const [squares, setSquares] = useState(generateSquares());\n  const [turn, setTurn] = useState(PLAYER_1);\n  const [winner, setWinner] = useState(null);\n\n  // Toggles turn between player 'x' and 'o'\n  const togglePlayerTurn = () => {\n    let newTurn = '';\n    if (turn === PLAYER_1) {\n      newTurn = PLAYER_2;\n    } else {\n      newTurn = PLAYER_1;\n    }\n    setTurn(newTurn);\n  };\n\n  const onClickCallback = (squareId) => {\n    const newSquares = [...squares];\n    newSquares.forEach((row) => {\n      row.forEach((square) => {\n        if (square.id === squareId && square.value === '') {\n          square.value = turn;\n        }\n      });\n    });\n    setSquares(newSquares);\n    setWinner(checkForWinner());\n    togglePlayerTurn();\n\n    let someoneWon = checkForWinner();\n    if (someoneWon) {\n      setWinner(someoneWon);\n      // If winner, disable all squares\n      squares.forEach((row) => {\n        row.map((square) => {\n          if (square.value == '') {\n            square.disabled = true;\n          }\n        });\n      });\n    }\n  };\n\n  // Checks current board for a winner\n  const checkForWinner = () => {  \n    let winner = null;\n\n    // Examine each winning formation as it applys to current board\n    for (let win of WINFORMATIONS) {\n      let current = new Set();\n      // Create a winning formation set from reference indicies \n      for (let idx of win) {\n        current.add(squares[idx[0]][idx[1]].value);\n      }\n      // If set contains one type, that is not '', we have a winner\n      if (current.size == 1 && current.values().next().value != '') {\n        winner = current.values().next().value;\n      }\n    }\n    // If board has '', game in progress\n    for (let row of squares) {\n      for (let col of row) {\n        if (col.value == '') {\n          return winner;\n        }\n      }\n    }\n    \n    // If no '' present and no winner, game is tie\n    return 'tie';\n  };\n\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setTurn(PLAYER_1);\n    setWinner(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>Winner is {winner}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board\n          squares={squares}\n          onClickCallback={onClickCallback}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}